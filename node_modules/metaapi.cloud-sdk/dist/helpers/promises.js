"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HandlePromise: function() {
        return HandlePromise;
    },
    ConditionPromise: function() {
        return ConditionPromise;
    }
});
const _helpers = /*#__PURE__*/ _interop_require_wildcard(require("./helpers"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
let HandlePromise = class HandlePromise {
    /**
   * Returns whether the promise has resolved
   * @returns {boolean} whether the promise has resolved
   */ get resolved() {
        return !!this._promise.resolved;
    }
    /**
   * Returns whether the promise has rejected
   * @returns {boolean} whether the promise has rejected
   */ get rejected() {
        return !!this._promise.rejected;
    }
    /**
   * Returns whether the promise has completed (either resolved or rejected)
   * @returns {boolean} whether the promise has completed (either resolved or rejected)
   */ get completed() {
        return !!this._promise.completed;
    }
    /**
   * Constructs instance
   * @param {Promise<T>} [promise] original promise to wrap into the handle
   */ constructor(promise){
        this._promise = _helpers.createHandlePromise();
        this.then = this._promise.then.bind(this._promise);
        this.catch = this._promise.catch.bind(this._promise);
        this.finally = this._promise.finally.bind(this.promise);
        this.resolve = this._promise.resolve.bind(this._promise);
        this.reject = this._promise.reject.bind(this._promise);
        this.timeout = this._promise.timeout.bind(this._promise);
        if (promise) {
            promise.then(this.resolve).catch(()=>{});
            promise.catch(this.reject);
        }
    }
};
let ConditionPromise = class ConditionPromise extends HandlePromise {
    /**
   * Calls the predicate to check if the promise should be resolved
   */ check() {
        if (this._predicate()) {
            this.resolve();
        }
    }
    /**
   * Constructs instance
   * @param {() => boolean} predicate function that returns true when the condition is reached
   */ constructor(predicate){
        super();
        this._predicate = predicate;
        this.check();
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnLi9oZWxwZXJzJztcblxuLyoqXG4gKiBQcm9taXNlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSBoYW5kbGUuIEl0IHdpbGwgbm90IHJhaXNlIGVycm9ycyB3aGVuIHJlamVjdGVkIHVudGlsIGl0IGlzIGV4cGxpY2l0bHkgYXdhaXRlZCBvclxuICogY2F0Y2ggaXMgc2V0XG4gKiBAdGVtcGxhdGUgVCBQcm9taXNlIHJlc3VsdCB0eXBlXG4gKiBAaW1wbGVtZW50cyB7UHJvbWlzZX1cbiAqL1xuZXhwb3J0IGNsYXNzIEhhbmRsZVByb21pc2Uge1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7UHJvbWlzZTxUPn0gW3Byb21pc2VdIG9yaWdpbmFsIHByb21pc2UgdG8gd3JhcCBpbnRvIHRoZSBoYW5kbGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb21pc2UpIHtcbiAgICB0aGlzLl9wcm9taXNlID0gaGVscGVycy5jcmVhdGVIYW5kbGVQcm9taXNlKCk7XG4gICAgdGhpcy50aGVuID0gdGhpcy5fcHJvbWlzZS50aGVuLmJpbmQodGhpcy5fcHJvbWlzZSk7XG4gICAgdGhpcy5jYXRjaCA9IHRoaXMuX3Byb21pc2UuY2F0Y2guYmluZCh0aGlzLl9wcm9taXNlKTtcbiAgICB0aGlzLmZpbmFsbHkgPSB0aGlzLl9wcm9taXNlLmZpbmFsbHkuYmluZCh0aGlzLnByb21pc2UpO1xuICAgIHRoaXMucmVzb2x2ZSA9IHRoaXMuX3Byb21pc2UucmVzb2x2ZS5iaW5kKHRoaXMuX3Byb21pc2UpO1xuICAgIHRoaXMucmVqZWN0ID0gdGhpcy5fcHJvbWlzZS5yZWplY3QuYmluZCh0aGlzLl9wcm9taXNlKTtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLl9wcm9taXNlLnRpbWVvdXQuYmluZCh0aGlzLl9wcm9taXNlKTtcbiAgICBpZiAocHJvbWlzZSkge1xuICAgICAgcHJvbWlzZS50aGVuKHRoaXMucmVzb2x2ZSkuY2F0Y2goKCkgPT4ge30pO1xuICAgICAgcHJvbWlzZS5jYXRjaCh0aGlzLnJlamVjdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgcHJvbWlzZSBoYXMgcmVzb2x2ZWRcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIHByb21pc2UgaGFzIHJlc29sdmVkXG4gICAqL1xuICBnZXQgcmVzb2x2ZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fcHJvbWlzZS5yZXNvbHZlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHByb21pc2UgaGFzIHJlamVjdGVkXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHRoZSBwcm9taXNlIGhhcyByZWplY3RlZFxuICAgKi9cbiAgZ2V0IHJlamVjdGVkKCkge1xuICAgIHJldHVybiAhIXRoaXMuX3Byb21pc2UucmVqZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBwcm9taXNlIGhhcyBjb21wbGV0ZWQgKGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZClcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIHByb21pc2UgaGFzIGNvbXBsZXRlZCAoZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkKVxuICAgKi9cbiAgZ2V0IGNvbXBsZXRlZCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9wcm9taXNlLmNvbXBsZXRlZDtcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBoYW5kbGUgcHJvbWlzZSwgcmVzb2x2aW5nIHdoZW4gbmVlZGVkIGNvbmRpdGlvbiBpcyByZWFjaGVkXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25kaXRpb25Qcm9taXNlIGV4dGVuZHMgSGFuZGxlUHJvbWlzZSB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHsoKSA9PiBib29sZWFufSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgd2hlbiB0aGUgY29uZGl0aW9uIGlzIHJlYWNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByZWRpY2F0ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgIHRoaXMuY2hlY2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgcHJlZGljYXRlIHRvIGNoZWNrIGlmIHRoZSBwcm9taXNlIHNob3VsZCBiZSByZXNvbHZlZFxuICAgKi9cbiAgY2hlY2soKSB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSgpKSB7XG4gICAgICB0aGlzLnJlc29sdmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJIYW5kbGVQcm9taXNlIiwiQ29uZGl0aW9uUHJvbWlzZSIsInJlc29sdmVkIiwiX3Byb21pc2UiLCJyZWplY3RlZCIsImNvbXBsZXRlZCIsImNvbnN0cnVjdG9yIiwicHJvbWlzZSIsImhlbHBlcnMiLCJjcmVhdGVIYW5kbGVQcm9taXNlIiwidGhlbiIsImJpbmQiLCJjYXRjaCIsImZpbmFsbHkiLCJyZXNvbHZlIiwicmVqZWN0IiwidGltZW91dCIsImNoZWNrIiwiX3ByZWRpY2F0ZSIsInByZWRpY2F0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lBVWFBLGFBQWE7ZUFBYkE7O0lBZ0RBQyxnQkFBZ0I7ZUFBaEJBOzs7aUVBeERZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUWxCLElBQUEsQUFBTUQsZ0JBQU4sTUFBTUE7SUFvQlg7OztHQUdDLEdBQ0QsSUFBSUUsV0FBVztRQUNiLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0MsUUFBUSxDQUFDRCxRQUFRO0lBQ2pDO0lBRUE7OztHQUdDLEdBQ0QsSUFBSUUsV0FBVztRQUNiLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0QsUUFBUSxDQUFDQyxRQUFRO0lBQ2pDO0lBRUE7OztHQUdDLEdBQ0QsSUFBSUMsWUFBWTtRQUNkLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0YsUUFBUSxDQUFDRSxTQUFTO0lBQ2xDO0lBeENBOzs7R0FHQyxHQUNEQyxZQUFZQyxPQUFPLENBQUU7UUFDbkIsSUFBSSxDQUFDSixRQUFRLEdBQUdLLFNBQVFDLG1CQUFtQjtRQUMzQyxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNQLFFBQVEsQ0FBQ08sSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDUixRQUFRO1FBQ2pELElBQUksQ0FBQ1MsS0FBSyxHQUFHLElBQUksQ0FBQ1QsUUFBUSxDQUFDUyxLQUFLLENBQUNELElBQUksQ0FBQyxJQUFJLENBQUNSLFFBQVE7UUFDbkQsSUFBSSxDQUFDVSxPQUFPLEdBQUcsSUFBSSxDQUFDVixRQUFRLENBQUNVLE9BQU8sQ0FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQ0osT0FBTztRQUN0RCxJQUFJLENBQUNPLE9BQU8sR0FBRyxJQUFJLENBQUNYLFFBQVEsQ0FBQ1csT0FBTyxDQUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDUixRQUFRO1FBQ3ZELElBQUksQ0FBQ1ksTUFBTSxHQUFHLElBQUksQ0FBQ1osUUFBUSxDQUFDWSxNQUFNLENBQUNKLElBQUksQ0FBQyxJQUFJLENBQUNSLFFBQVE7UUFDckQsSUFBSSxDQUFDYSxPQUFPLEdBQUcsSUFBSSxDQUFDYixRQUFRLENBQUNhLE9BQU8sQ0FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQ1IsUUFBUTtRQUN2RCxJQUFJSSxTQUFTO1lBQ1hBLFFBQVFHLElBQUksQ0FBQyxJQUFJLENBQUNJLE9BQU8sRUFBRUYsS0FBSyxDQUFDLEtBQU87WUFDeENMLFFBQVFLLEtBQUssQ0FBQyxJQUFJLENBQUNHLE1BQU07UUFDM0I7SUFDRjtBQXlCRjtBQUtPLElBQUEsQUFBTWQsbUJBQU4sTUFBTUEseUJBQXlCRDtJQVlwQzs7R0FFQyxHQUNEaUIsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDQyxVQUFVLElBQUk7WUFDckIsSUFBSSxDQUFDSixPQUFPO1FBQ2Q7SUFDRjtJQWpCQTs7O0dBR0MsR0FDRFIsWUFBWWEsU0FBUyxDQUFFO1FBQ3JCLEtBQUs7UUFDTCxJQUFJLENBQUNELFVBQVUsR0FBR0M7UUFDbEIsSUFBSSxDQUFDRixLQUFLO0lBQ1o7QUFVRiJ9