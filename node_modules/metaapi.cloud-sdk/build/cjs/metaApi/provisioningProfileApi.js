"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ProvisioningProfileApi;
    }
});
const _provisioningProfile = /*#__PURE__*/ _interop_require_default(require("./provisioningProfile"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
let ProvisioningProfileApi = class ProvisioningProfileApi {
    /**
   * Retrieves provisioning profiles
   * @param {Number} version optional version filter (allowed values are 4 and 5)
   * @param {String} status optional status filter (allowed values are new and active)
   * @return {Promise<Array<ProvisioningProfile>>} promise resolving with an array of provisioning profile entities
   */ async getProvisioningProfiles(version, status) {
        let profiles = await this._provisioningProfileClient.getProvisioningProfiles(version, status);
        return profiles.map((p)=>new _provisioningProfile.default(p, this._provisioningProfileClient));
    }
    /**
   * Retrieves a provisioning profile by id
   * @param {String} provisioningProfileId provisioning profile id
   * @return {Promise<ProvisioningProfile>} promise resolving with provisioning profile entity
   */ async getProvisioningProfile(provisioningProfileId) {
        let profile = await this._provisioningProfileClient.getProvisioningProfile(provisioningProfileId);
        return new _provisioningProfile.default(profile, this._provisioningProfileClient);
    }
    /**
   * Creates a provisioning profile
   * @param {NewProvisioningProfileDto} profile provisioning profile data
   * @return {Promise<ProvisioningProfile>} promise resolving with provisioning profile entity
   */ async createProvisioningProfile(profile) {
        let id = await this._provisioningProfileClient.createProvisioningProfile(profile);
        return new _provisioningProfile.default(Object.assign({}, profile, {
            _id: id.id,
            status: "new"
        }), this._provisioningProfileClient);
    }
    /**
   * Constructs a provisioning profile API instance
   * @param {ProvisioningProfileClient} provisioningProfileClient provisioning profile REST API client
   */ constructor(provisioningProfileClient){
        this._provisioningProfileClient = provisioningProfileClient;
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxhbm9uPiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBQcm92aXNpb25pbmdQcm9maWxlIGZyb20gJy4vcHJvdmlzaW9uaW5nUHJvZmlsZSc7XG5cbi8qKlxuICogRXhwb3NlcyBwcm92aXNpb25pbmcgcHJvZmlsZSBBUEkgbG9naWMgdG8gdGhlIGNvbnN1bWVyc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm92aXNpb25pbmdQcm9maWxlQXBpIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIHByb3Zpc2lvbmluZyBwcm9maWxlIEFQSSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnR9IHByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQgcHJvdmlzaW9uaW5nIHByb2ZpbGUgUkVTVCBBUEkgY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm92aXNpb25pbmdQcm9maWxlQ2xpZW50KSB7XG4gICAgdGhpcy5fcHJvdmlzaW9uaW5nUHJvZmlsZUNsaWVudCA9IHByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHByb3Zpc2lvbmluZyBwcm9maWxlc1xuICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiBvcHRpb25hbCB2ZXJzaW9uIGZpbHRlciAoYWxsb3dlZCB2YWx1ZXMgYXJlIDQgYW5kIDUpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0dXMgb3B0aW9uYWwgc3RhdHVzIGZpbHRlciAoYWxsb3dlZCB2YWx1ZXMgYXJlIG5ldyBhbmQgYWN0aXZlKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PFByb3Zpc2lvbmluZ1Byb2ZpbGU+Pn0gcHJvbWlzZSByZXNvbHZpbmcgd2l0aCBhbiBhcnJheSBvZiBwcm92aXNpb25pbmcgcHJvZmlsZSBlbnRpdGllc1xuICAgKi9cbiAgYXN5bmMgZ2V0UHJvdmlzaW9uaW5nUHJvZmlsZXModmVyc2lvbiwgc3RhdHVzKSB7XG4gICAgbGV0IHByb2ZpbGVzID0gYXdhaXQgdGhpcy5fcHJvdmlzaW9uaW5nUHJvZmlsZUNsaWVudC5nZXRQcm92aXNpb25pbmdQcm9maWxlcyh2ZXJzaW9uLCBzdGF0dXMpO1xuICAgIHJldHVybiBwcm9maWxlcy5tYXAocCA9PiBuZXcgUHJvdmlzaW9uaW5nUHJvZmlsZShwLCB0aGlzLl9wcm92aXNpb25pbmdQcm9maWxlQ2xpZW50KSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgcHJvdmlzaW9uaW5nIHByb2ZpbGUgYnkgaWRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3Zpc2lvbmluZ1Byb2ZpbGVJZCBwcm92aXNpb25pbmcgcHJvZmlsZSBpZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFByb3Zpc2lvbmluZ1Byb2ZpbGU+fSBwcm9taXNlIHJlc29sdmluZyB3aXRoIHByb3Zpc2lvbmluZyBwcm9maWxlIGVudGl0eVxuICAgKi9cbiAgYXN5bmMgZ2V0UHJvdmlzaW9uaW5nUHJvZmlsZShwcm92aXNpb25pbmdQcm9maWxlSWQpIHtcbiAgICBsZXQgcHJvZmlsZSA9IGF3YWl0IHRoaXMuX3Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQuZ2V0UHJvdmlzaW9uaW5nUHJvZmlsZShwcm92aXNpb25pbmdQcm9maWxlSWQpO1xuICAgIHJldHVybiBuZXcgUHJvdmlzaW9uaW5nUHJvZmlsZShwcm9maWxlLCB0aGlzLl9wcm92aXNpb25pbmdQcm9maWxlQ2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcHJvdmlzaW9uaW5nIHByb2ZpbGVcbiAgICogQHBhcmFtIHtOZXdQcm92aXNpb25pbmdQcm9maWxlRHRvfSBwcm9maWxlIHByb3Zpc2lvbmluZyBwcm9maWxlIGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZTxQcm92aXNpb25pbmdQcm9maWxlPn0gcHJvbWlzZSByZXNvbHZpbmcgd2l0aCBwcm92aXNpb25pbmcgcHJvZmlsZSBlbnRpdHlcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVByb3Zpc2lvbmluZ1Byb2ZpbGUocHJvZmlsZSkge1xuICAgIGxldCBpZCA9IGF3YWl0IHRoaXMuX3Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQuY3JlYXRlUHJvdmlzaW9uaW5nUHJvZmlsZShwcm9maWxlKTtcbiAgICByZXR1cm4gbmV3IFByb3Zpc2lvbmluZ1Byb2ZpbGUoT2JqZWN0LmFzc2lnbih7fSwgcHJvZmlsZSwge19pZDogaWQuaWQsIHN0YXR1czogJ25ldyd9KSxcbiAgICAgIHRoaXMuX3Byb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQpO1xuICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJQcm92aXNpb25pbmdQcm9maWxlQXBpIiwiZ2V0UHJvdmlzaW9uaW5nUHJvZmlsZXMiLCJ2ZXJzaW9uIiwic3RhdHVzIiwicHJvZmlsZXMiLCJfcHJvdmlzaW9uaW5nUHJvZmlsZUNsaWVudCIsIm1hcCIsInAiLCJQcm92aXNpb25pbmdQcm9maWxlIiwiZ2V0UHJvdmlzaW9uaW5nUHJvZmlsZSIsInByb3Zpc2lvbmluZ1Byb2ZpbGVJZCIsInByb2ZpbGUiLCJjcmVhdGVQcm92aXNpb25pbmdQcm9maWxlIiwiaWQiLCJPYmplY3QiLCJhc3NpZ24iLCJfaWQiLCJjb25zdHJ1Y3RvciIsInByb3Zpc2lvbmluZ1Byb2ZpbGVDbGllbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O2VBT3FCQTs7OzRFQUxXOzs7Ozs7QUFLakIsSUFBQSxBQUFNQSx5QkFBTixNQUFNQTtJQVVuQjs7Ozs7R0FLQyxHQUNELE1BQU1DLHdCQUF3QkMsT0FBTyxFQUFFQyxNQUFNLEVBQUU7UUFDN0MsSUFBSUMsV0FBVyxNQUFNLElBQUksQ0FBQ0MsMEJBQTBCLENBQUNKLHVCQUF1QixDQUFDQyxTQUFTQztRQUN0RixPQUFPQyxTQUFTRSxHQUFHLENBQUNDLENBQUFBLElBQUssSUFBSUMsNEJBQW1CLENBQUNELEdBQUcsSUFBSSxDQUFDRiwwQkFBMEI7SUFDckY7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTUksdUJBQXVCQyxxQkFBcUIsRUFBRTtRQUNsRCxJQUFJQyxVQUFVLE1BQU0sSUFBSSxDQUFDTiwwQkFBMEIsQ0FBQ0ksc0JBQXNCLENBQUNDO1FBQzNFLE9BQU8sSUFBSUYsNEJBQW1CLENBQUNHLFNBQVMsSUFBSSxDQUFDTiwwQkFBMEI7SUFDekU7SUFFQTs7OztHQUlDLEdBQ0QsTUFBTU8sMEJBQTBCRCxPQUFPLEVBQUU7UUFDdkMsSUFBSUUsS0FBSyxNQUFNLElBQUksQ0FBQ1IsMEJBQTBCLENBQUNPLHlCQUF5QixDQUFDRDtRQUN6RSxPQUFPLElBQUlILDRCQUFtQixDQUFDTSxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSixTQUFTO1lBQUNLLEtBQUtILEdBQUdBLEVBQUU7WUFBRVYsUUFBUTtRQUFLLElBQ2xGLElBQUksQ0FBQ0UsMEJBQTBCO0lBQ25DO0lBdENBOzs7R0FHQyxHQUNEWSxZQUFZQyx5QkFBeUIsQ0FBRTtRQUNyQyxJQUFJLENBQUNiLDBCQUEwQixHQUFHYTtJQUNwQztBQWtDRiJ9