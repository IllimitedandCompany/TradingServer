"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return MetaApiClient;
    }
});
const _methodAccessError = /*#__PURE__*/ _interop_require_default(require("./methodAccessError"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MetaApiClient {
    /**
   * Returns type of current token
   * @returns {string} Type of current token
   * @protected
   */ get _tokenType() {
        if (typeof this._token === "string" && this._token.split(".").length === 3) {
            return "api";
        }
        if (typeof this._token === "string" && this._token.split(".").length === 1) {
            return "account";
        }
        return "";
    }
    /**
   * Checks that current token is not api token
   * @returns {boolean} Indicator of absence api token
   * @protected
   */ _isNotJwtToken() {
        return typeof this._token !== "string" || this._token.split(".").length !== 3;
    }
    /**
   * Checks that current token is not account token
   * @returns {boolean} Indicator of absence account token
   * @protected
   */ _isNotAccountToken() {
        return typeof this._token !== "string" || this._token.split(".").length !== 1;
    }
    /**
   * Handles no accessing to the method
   * @param {string} methodName Name of method
   * @protected
   * @throws
   */ _handleNoAccessError(methodName) {
        return Promise.reject(new _methodAccessError.default(methodName, this._tokenType));
    }
    /**
   * Constructs MetaTrader API client instance
   * @param {DomainClient} domainClient domain client
   */ constructor(domainClient){
        this._domainClient = domainClient;
        this._token = domainClient.token;
    }
}
